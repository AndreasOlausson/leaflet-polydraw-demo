import * as L from 'leaflet';
import { DrawMode } from './enums';
import './styles/polydraw.css';
import type { PolydrawConfig } from './types/polydraw-interfaces';
declare class Polydraw extends L.Control {
    private map;
    private tracer;
    private turfHelper;
    private subContainer?;
    private config;
    private mapStateService;
    private eventManager;
    private polygonInformation;
    private modeManager;
    private polygonDrawManager;
    private polygonMutationManager;
    private arrayOfFeatureGroups;
    private drawMode;
    private drawModeListeners;
    private _boundKeyDownHandler;
    private _boundKeyUpHandler;
    private isModifierKeyHeld;
    private _boundTouchMove;
    private _boundTouchEnd;
    private _boundTouchStart;
    constructor(options?: L.ControlOptions & {
        config?: PolydrawConfig;
        configPath?: string;
    });
    private loadExternalConfig;
    private initializeComponents;
    onAdd(_map: L.Map): HTMLElement;
    addTo(map: L.Map): this;
    getFeatureGroups(): L.FeatureGroup[];
    onRemove(_map: L.Map): void;
    addPredefinedPolygon(geographicBorders: L.LatLng[][][], options?: {
        visualOptimizationLevel?: number;
    }): Promise<void>;
    setDrawMode(mode: DrawMode): void;
    getDrawMode(): DrawMode;
    on(event: any, callback: any): void;
    off(event: any, callback: any): void;
    private emitDrawModeChanged;
    /**
     * Update the draggable state of all existing markers when draw mode changes
     */
    private updateMarkerDraggableState;
    removeAllFeatureGroups(): void;
    private stopDraw;
    private setLeafletMapEvents;
    private resetTracker;
    private drawStartedEvents;
    private mouseMove;
    private handleFreehandDrawCompletion;
    private mouseUpLeave;
    private events;
    private mouseDown;
    private startDraw;
    private setupKeyboardHandlers;
    private removeKeyboardHandlers;
    private handleKeyDown;
    private handleKeyUp;
    /**
     * Update all markers to show/hide edge deletion visual feedback
     */
    private updateAllMarkersForEdgeDeletion;
    /**
     * Update individual marker for edge deletion visual feedback
     */
    private updateMarkerForEdgeDeletion;
    /**
     * Handle marker hover when modifier key is held - event handler version
     */
    private onMarkerHoverForEdgeDeletionEvent;
    /**
     * Handle marker leave when modifier key is held - event handler version
     */
    private onMarkerLeaveForEdgeDeletionEvent;
    private handleDoubleClick;
    /**
     * Detect if modifier key is pressed (Ctrl on Windows/Linux, Cmd on Mac)
     */
    private isModifierKeyPressed;
    private updateActivateButtonIndicator;
}
export default Polydraw;
//# sourceMappingURL=polydraw.d.ts.map